// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TestObjects.proto

/*
Package hc is a generated protocol buffer package.

It is generated from these files:
	TestObjects.proto
	messages/healthcare.proto
	services/ServiceInfo.proto
	services/healthcare.proto

It has these top-level messages:
	MapValue
	TestMessage
	Claim
	Accumulator
	AddClaim
	GetAccumulator
*/
package hc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MYENUM int32

const (
	MYENUM_OPT0 MYENUM = 0
	MYENUM_OPTA MYENUM = 1
	MYENUM_OPTB MYENUM = 2
)

var MYENUM_name = map[int32]string{
	0: "OPT0",
	1: "OPTA",
	2: "OPTB",
}
var MYENUM_value = map[string]int32{
	"OPT0": 0,
	"OPTA": 1,
	"OPTB": 2,
}

func (x MYENUM) String() string {
	return proto.EnumName(MYENUM_name, int32(x))
}
func (MYENUM) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TestMessage_NestedEnum int32

const (
	TestMessage_OPT0 TestMessage_NestedEnum = 0
	TestMessage_OPT1 TestMessage_NestedEnum = 1
)

var TestMessage_NestedEnum_name = map[int32]string{
	0: "OPT0",
	1: "OPT1",
}
var TestMessage_NestedEnum_value = map[string]int32{
	"OPT0": 0,
	"OPT1": 1,
}

func (x TestMessage_NestedEnum) String() string {
	return proto.EnumName(TestMessage_NestedEnum_name, int32(x))
}
func (TestMessage_NestedEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type MapValue struct {
	MapValueValue string `protobuf:"bytes,1,opt,name=mapValueValue" json:"mapValueValue,omitempty"`
}

func (m *MapValue) Reset()                    { *m = MapValue{} }
func (m *MapValue) String() string            { return proto.CompactTextString(m) }
func (*MapValue) ProtoMessage()               {}
func (*MapValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MapValue) GetMapValueValue() string {
	if m != nil {
		return m.MapValueValue
	}
	return ""
}

type TestMessage struct {
	IntMap map[int32]int32      `protobuf:"bytes,1,rep,name=intMap" json:"intMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MsgMap map[string]*MapValue `protobuf:"bytes,2,rep,name=msgMap" json:"msgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Arr    []string             `protobuf:"bytes,3,rep,name=arr" json:"arr,omitempty"`
	B      []byte               `protobuf:"bytes,4,opt,name=b,proto3" json:"b,omitempty"`
	S      string               `protobuf:"bytes,5,opt,name=s" json:"s,omitempty"`
	X      int32                `protobuf:"varint,6,opt,name=x" json:"x,omitempty"`
	E      MYENUM               `protobuf:"varint,7,opt,name=e,enum=main.MYENUM" json:"e,omitempty"`
	// Types that are valid to be assigned to TestOneof:
	//	*TestMessage_Name
	//	*TestMessage_SubMessage
	TestOneof  isTestMessage_TestOneof    `protobuf_oneof:"test_oneof"`
	Nested     *TestMessage_NestedMessage `protobuf:"bytes,10,opt,name=nested" json:"nested,omitempty"`
	NestedEnum TestMessage_NestedEnum     `protobuf:"varint,11,opt,name=nestedEnum,enum=main.TestMessage_NestedEnum" json:"nestedEnum,omitempty"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isTestMessage_TestOneof interface {
	isTestMessage_TestOneof()
}

type TestMessage_Name struct {
	Name string `protobuf:"bytes,8,opt,name=name,oneof"`
}
type TestMessage_SubMessage struct {
	SubMessage *MapValue `protobuf:"bytes,9,opt,name=sub_message,json=subMessage,oneof"`
}

func (*TestMessage_Name) isTestMessage_TestOneof()       {}
func (*TestMessage_SubMessage) isTestMessage_TestOneof() {}

func (m *TestMessage) GetTestOneof() isTestMessage_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *TestMessage) GetIntMap() map[int32]int32 {
	if m != nil {
		return m.IntMap
	}
	return nil
}

func (m *TestMessage) GetMsgMap() map[string]*MapValue {
	if m != nil {
		return m.MsgMap
	}
	return nil
}

func (m *TestMessage) GetArr() []string {
	if m != nil {
		return m.Arr
	}
	return nil
}

func (m *TestMessage) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *TestMessage) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func (m *TestMessage) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TestMessage) GetE() MYENUM {
	if m != nil {
		return m.E
	}
	return MYENUM_OPT0
}

func (m *TestMessage) GetName() string {
	if x, ok := m.GetTestOneof().(*TestMessage_Name); ok {
		return x.Name
	}
	return ""
}

func (m *TestMessage) GetSubMessage() *MapValue {
	if x, ok := m.GetTestOneof().(*TestMessage_SubMessage); ok {
		return x.SubMessage
	}
	return nil
}

func (m *TestMessage) GetNested() *TestMessage_NestedMessage {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *TestMessage) GetNestedEnum() TestMessage_NestedEnum {
	if m != nil {
		return m.NestedEnum
	}
	return TestMessage_OPT0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestMessage_OneofMarshaler, _TestMessage_OneofUnmarshaler, _TestMessage_OneofSizer, []interface{}{
		(*TestMessage_Name)(nil),
		(*TestMessage_SubMessage)(nil),
	}
}

func _TestMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestMessage)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *TestMessage_Name:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *TestMessage_SubMessage:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TestMessage.TestOneof has unexpected type %T", x)
	}
	return nil
}

func _TestMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestMessage)
	switch tag {
	case 8: // test_oneof.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TestOneof = &TestMessage_Name{x}
		return true, err
	case 9: // test_oneof.sub_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapValue)
		err := b.DecodeMessage(msg)
		m.TestOneof = &TestMessage_SubMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TestMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestMessage)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *TestMessage_Name:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *TestMessage_SubMessage:
		s := proto.Size(x.SubMessage)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TestMessage_NestedMessage struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
}

func (m *TestMessage_NestedMessage) Reset()                    { *m = TestMessage_NestedMessage{} }
func (m *TestMessage_NestedMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage_NestedMessage) ProtoMessage()               {}
func (*TestMessage_NestedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *TestMessage_NestedMessage) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func init() {
	proto.RegisterType((*MapValue)(nil), "main.MapValue")
	proto.RegisterType((*TestMessage)(nil), "main.TestMessage")
	proto.RegisterType((*TestMessage_NestedMessage)(nil), "main.TestMessage.NestedMessage")
	proto.RegisterEnum("main.MYENUM", MYENUM_name, MYENUM_value)
	proto.RegisterEnum("main.TestMessage_NestedEnum", TestMessage_NestedEnum_name, TestMessage_NestedEnum_value)
}

func init() { proto.RegisterFile("TestObjects.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xcd, 0xd8, 0xb2, 0x6a, 0x8f, 0xec, 0xa0, 0x2c, 0x39, 0x2c, 0x22, 0x69, 0x85, 0x09, 0x45,
	0xf4, 0x20, 0x12, 0x95, 0xd2, 0x0f, 0x7a, 0x89, 0xc1, 0x90, 0x1c, 0x94, 0x94, 0x6d, 0x5a, 0xe8,
	0x29, 0xac, 0xdc, 0x4d, 0x70, 0xab, 0x0f, 0xa3, 0x95, 0x82, 0x73, 0xeb, 0x9f, 0xea, 0x7f, 0xea,
	0xcf, 0x28, 0xfb, 0x51, 0x2a, 0x23, 0x72, 0xb1, 0xdf, 0xcc, 0xbc, 0x37, 0x3b, 0x3b, 0x6f, 0x85,
	0x07, 0x37, 0x42, 0x36, 0xd7, 0xd9, 0x0f, 0xb1, 0x6a, 0x64, 0xbc, 0xa9, 0xab, 0xa6, 0x22, 0x4e,
	0xc1, 0xd7, 0x65, 0x30, 0xdb, 0x16, 0xf9, 0x8a, 0xe7, 0xb9, 0x49, 0xce, 0x4f, 0x71, 0x9c, 0xf2,
	0xcd, 0x57, 0x9e, 0xb7, 0x82, 0x9c, 0xe0, 0xac, 0xb0, 0x58, 0xff, 0x50, 0x08, 0x21, 0x9a, 0xb0,
	0xdd, 0xe4, 0xfc, 0x8f, 0x83, 0x9e, 0x6a, 0x9e, 0x0a, 0x29, 0xf9, 0xbd, 0x20, 0x6f, 0xd0, 0x5d,
	0x97, 0x4d, 0xca, 0x37, 0x14, 0xc2, 0x61, 0xe4, 0x25, 0xc7, 0xb1, 0x3a, 0x27, 0xee, 0x50, 0xe2,
	0x4b, 0x5d, 0x5f, 0x96, 0x4d, 0xfd, 0xc8, 0x2c, 0x59, 0xc9, 0x0a, 0x79, 0xaf, 0x64, 0x83, 0xa7,
	0x64, 0xa9, 0xae, 0x5b, 0x99, 0x21, 0x13, 0x1f, 0x87, 0xbc, 0xae, 0xe9, 0x30, 0x1c, 0x46, 0x13,
	0xa6, 0x20, 0x99, 0x22, 0x64, 0xd4, 0x09, 0x21, 0x9a, 0x32, 0xc8, 0x54, 0x24, 0xe9, 0x48, 0xcf,
	0x0d, 0x52, 0x45, 0x5b, 0xea, 0x86, 0x10, 0x8d, 0x18, 0x6c, 0x49, 0x80, 0x20, 0xe8, 0xb3, 0x10,
	0xa2, 0xfd, 0x64, 0x6a, 0x4e, 0x4b, 0xbf, 0x2d, 0xaf, 0xbe, 0xa4, 0x0c, 0x04, 0x39, 0x44, 0xa7,
	0xe4, 0x85, 0xa0, 0x63, 0x25, 0xbd, 0xd8, 0x63, 0x3a, 0x22, 0x67, 0xe8, 0xc9, 0x36, 0xbb, 0x2d,
	0xcc, 0x40, 0x74, 0x12, 0x42, 0xe4, 0x25, 0xfb, 0x56, 0x6b, 0xb7, 0x72, 0xb1, 0xc7, 0x50, 0xb6,
	0xd9, 0xbf, 0x75, 0xbc, 0x45, 0xb7, 0x14, 0xb2, 0x11, 0xdf, 0x29, 0x6a, 0xf6, 0x8b, 0xfe, 0xbd,
	0xae, 0x74, 0xdd, 0x46, 0xcc, 0xd2, 0xc9, 0x47, 0x44, 0x83, 0x96, 0x65, 0x5b, 0x50, 0x4f, 0x8f,
	0x79, 0xf4, 0x94, 0x58, 0x71, 0x58, 0x87, 0x1f, 0x1c, 0xe3, 0x6c, 0xa7, 0xad, 0xba, 0x3a, 0xd7,
	0x06, 0x8e, 0x18, 0xf0, 0xe0, 0x3d, 0x7a, 0x1d, 0x13, 0xd4, 0x16, 0x7f, 0x8a, 0x47, 0x5b, 0x56,
	0x90, 0x1c, 0xe2, 0xe8, 0x41, 0x7b, 0x3e, 0xd0, 0x39, 0x13, 0x7c, 0x18, 0xbc, 0x83, 0xe0, 0x12,
	0xbd, 0x8e, 0x11, 0x5d, 0xe9, 0xc4, 0x48, 0x4f, 0xba, 0xd2, 0xde, 0x7a, 0x3a, 0xad, 0xe6, 0x21,
	0xe2, 0xff, 0xf1, 0xc9, 0x18, 0x9d, 0xeb, 0x4f, 0x37, 0xa7, 0xfe, 0x9e, 0x45, 0x67, 0x3e, 0x2c,
	0xa6, 0x88, 0x8d, 0x90, 0xcd, 0x6d, 0x55, 0x8a, 0xea, 0xee, 0xd5, 0x4b, 0x74, 0x8d, 0x43, 0x3d,
	0xee, 0xb9, 0x0f, 0x16, 0x2d, 0xfc, 0x41, 0x72, 0x6e, 0x5e, 0xe4, 0x67, 0x51, 0x3f, 0xac, 0x57,
	0x82, 0x24, 0xa8, 0x9f, 0x3a, 0x39, 0xe8, 0x6d, 0x2f, 0xe8, 0xa7, 0xe6, 0xce, 0xaf, 0xdf, 0x14,
	0x16, 0xcf, 0xf1, 0x68, 0x55, 0x15, 0x71, 0xde, 0x6e, 0xab, 0xbb, 0x26, 0x56, 0x33, 0xec, 0x7c,
	0x27, 0x99, 0xab, 0xff, 0x5e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x54, 0xa9, 0x0e, 0x81, 0x58,
	0x03, 0x00, 0x00,
}
