// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages/healthcare.proto

package hc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Claim struct {
	AccumulatorId string `protobuf:"bytes,1,opt,name=accumulatorId" json:"accumulatorId,omitempty"`
	SourceSystem  string `protobuf:"bytes,2,opt,name=sourceSystem" json:"sourceSystem,omitempty"`
	SourceClaimId string `protobuf:"bytes,3,opt,name=sourceClaimId" json:"sourceClaimId,omitempty"`
	DateOfService int64  `protobuf:"varint,4,opt,name=dateOfService" json:"dateOfService,omitempty"`
	AmountCents   int32  `protobuf:"varint,5,opt,name=amountCents" json:"amountCents,omitempty"`
	MemberId      string `protobuf:"bytes,6,opt,name=memberId" json:"memberId,omitempty"`
	PlanSponsor   string `protobuf:"bytes,7,opt,name=planSponsor" json:"planSponsor,omitempty"`
	PlanYear      int32  `protobuf:"varint,8,opt,name=planYear" json:"planYear,omitempty"`
}

func (m *Claim) Reset()                    { *m = Claim{} }
func (m *Claim) String() string            { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()               {}
func (*Claim) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Claim) GetAccumulatorId() string {
	if m != nil {
		return m.AccumulatorId
	}
	return ""
}

func (m *Claim) GetSourceSystem() string {
	if m != nil {
		return m.SourceSystem
	}
	return ""
}

func (m *Claim) GetSourceClaimId() string {
	if m != nil {
		return m.SourceClaimId
	}
	return ""
}

func (m *Claim) GetDateOfService() int64 {
	if m != nil {
		return m.DateOfService
	}
	return 0
}

func (m *Claim) GetAmountCents() int32 {
	if m != nil {
		return m.AmountCents
	}
	return 0
}

func (m *Claim) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *Claim) GetPlanSponsor() string {
	if m != nil {
		return m.PlanSponsor
	}
	return ""
}

func (m *Claim) GetPlanYear() int32 {
	if m != nil {
		return m.PlanYear
	}
	return 0
}

type Accumulator struct {
	MemberId      string `protobuf:"bytes,1,opt,name=memberId" json:"memberId,omitempty"`
	AccumulatorId string `protobuf:"bytes,2,opt,name=accumulatorId" json:"accumulatorId,omitempty"`
	ValueCents    int32  `protobuf:"varint,3,opt,name=valueCents" json:"valueCents,omitempty"`
	PlanYear      int32  `protobuf:"varint,4,opt,name=planYear" json:"planYear,omitempty"`
	StateHash     string `protobuf:"bytes,5,opt,name=stateHash" json:"stateHash,omitempty"`
}

func (m *Accumulator) Reset()                    { *m = Accumulator{} }
func (m *Accumulator) String() string            { return proto.CompactTextString(m) }
func (*Accumulator) ProtoMessage()               {}
func (*Accumulator) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Accumulator) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *Accumulator) GetAccumulatorId() string {
	if m != nil {
		return m.AccumulatorId
	}
	return ""
}

func (m *Accumulator) GetValueCents() int32 {
	if m != nil {
		return m.ValueCents
	}
	return 0
}

func (m *Accumulator) GetPlanYear() int32 {
	if m != nil {
		return m.PlanYear
	}
	return 0
}

func (m *Accumulator) GetStateHash() string {
	if m != nil {
		return m.StateHash
	}
	return ""
}

type AddClaim struct {
	Claim     *Claim `protobuf:"bytes,1,opt,name=claim" json:"claim,omitempty"`
	StateHash string `protobuf:"bytes,2,opt,name=StateHash" json:"StateHash,omitempty"`
}

func (m *AddClaim) Reset()                    { *m = AddClaim{} }
func (m *AddClaim) String() string            { return proto.CompactTextString(m) }
func (*AddClaim) ProtoMessage()               {}
func (*AddClaim) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AddClaim) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func (m *AddClaim) GetStateHash() string {
	if m != nil {
		return m.StateHash
	}
	return ""
}

type GetAccumulator struct {
	MemberId      string `protobuf:"bytes,1,opt,name=memberId" json:"memberId,omitempty"`
	AccumulatorId string `protobuf:"bytes,2,opt,name=accumulatorId" json:"accumulatorId,omitempty"`
	PlanYear      int32  `protobuf:"varint,3,opt,name=planYear" json:"planYear,omitempty"`
}

func (m *GetAccumulator) Reset()                    { *m = GetAccumulator{} }
func (m *GetAccumulator) String() string            { return proto.CompactTextString(m) }
func (*GetAccumulator) ProtoMessage()               {}
func (*GetAccumulator) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetAccumulator) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *GetAccumulator) GetAccumulatorId() string {
	if m != nil {
		return m.AccumulatorId
	}
	return ""
}

func (m *GetAccumulator) GetPlanYear() int32 {
	if m != nil {
		return m.PlanYear
	}
	return 0
}

func init() {
	proto.RegisterType((*Claim)(nil), "main.Claim")
	proto.RegisterType((*Accumulator)(nil), "main.Accumulator")
	proto.RegisterType((*AddClaim)(nil), "main.AddClaim")
	proto.RegisterType((*GetAccumulator)(nil), "main.GetAccumulator")
}

func init() { proto.RegisterFile("messages/healthcare.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0xc7, 0x95, 0xa4, 0xe9, 0xd7, 0x3a, 0x1f, 0x0c, 0x99, 0x02, 0x42, 0x55, 0x88, 0x18, 0x3a,
	0x05, 0x09, 0x16, 0xd6, 0xb6, 0x03, 0xad, 0x10, 0x42, 0x4a, 0x26, 0xd8, 0xae, 0xce, 0x95, 0x54,
	0x8a, 0xe3, 0xca, 0x76, 0x2a, 0x78, 0x14, 0x1e, 0x81, 0xb7, 0x44, 0x76, 0x20, 0x8d, 0x81, 0x91,
	0xcd, 0xf7, 0x3b, 0xfb, 0x7f, 0xf7, 0x3f, 0x1f, 0x39, 0x61, 0x28, 0x25, 0x3c, 0xa3, 0xbc, 0x2c,
	0x11, 0x2a, 0x55, 0x52, 0x10, 0x98, 0xee, 0x04, 0x57, 0x3c, 0x1c, 0x30, 0xd8, 0xd6, 0xc9, 0x9b,
	0x4b, 0xfc, 0x45, 0x05, 0x5b, 0x16, 0x5e, 0x90, 0x23, 0xa0, 0xb4, 0x61, 0x4d, 0x05, 0x8a, 0x8b,
	0x55, 0x11, 0x39, 0xb1, 0x33, 0x1d, 0x67, 0x36, 0x0c, 0x13, 0xf2, 0x5f, 0xf2, 0x46, 0x50, 0xcc,
	0x5f, 0xa5, 0x42, 0x16, 0xb9, 0xe6, 0x92, 0xc5, 0xb4, 0x52, 0x1b, 0x1b, 0xe1, 0x55, 0x11, 0x79,
	0xad, 0x92, 0x05, 0xf5, 0xad, 0x02, 0x14, 0x3e, 0x6c, 0x72, 0x14, 0xfb, 0x2d, 0xc5, 0x68, 0x10,
	0x3b, 0x53, 0x2f, 0xb3, 0x61, 0x18, 0x93, 0x00, 0x18, 0x6f, 0x6a, 0xb5, 0xc0, 0x5a, 0xc9, 0xc8,
	0x8f, 0x9d, 0xa9, 0x9f, 0xf5, 0x51, 0x78, 0x4a, 0x46, 0x0c, 0xd9, 0x1a, 0x75, 0xcb, 0x43, 0x53,
	0xa8, 0x8b, 0xf5, 0xeb, 0x5d, 0x05, 0x75, 0xbe, 0xe3, 0xb5, 0xe4, 0x22, 0xfa, 0x67, 0xd2, 0x7d,
	0xa4, 0x5f, 0xeb, 0xf0, 0x11, 0x41, 0x44, 0x23, 0x23, 0xde, 0xc5, 0xc9, 0xbb, 0x43, 0x82, 0xd9,
	0xc1, 0xbd, 0x55, 0xc9, 0xf9, 0x56, 0xe9, 0xc7, 0xf4, 0xdc, 0xdf, 0xa6, 0x37, 0x21, 0x64, 0x0f,
	0x55, 0x83, 0xad, 0x19, 0xcf, 0xd4, 0xeb, 0x11, 0xab, 0x9b, 0x81, 0xdd, 0x4d, 0x78, 0x46, 0xc6,
	0x52, 0x81, 0xc2, 0x25, 0xc8, 0xd2, 0xcc, 0x61, 0x9c, 0x1d, 0x40, 0x72, 0x47, 0x46, 0xb3, 0xa2,
	0x68, 0x7f, 0xf2, 0x9c, 0xf8, 0x54, 0x1f, 0x4c, 0x93, 0xc1, 0x55, 0x90, 0xea, 0x9f, 0x4e, 0x4d,
	0x2e, 0x6b, 0x33, 0x5a, 0x2c, 0xef, 0xc4, 0xda, 0x56, 0x0f, 0x20, 0xa9, 0xc9, 0xf1, 0x2d, 0xaa,
	0xbf, 0xb5, 0xde, 0xb7, 0xe6, 0xd9, 0xd6, 0xe6, 0x37, 0x64, 0x42, 0x39, 0x4b, 0xab, 0xe6, 0x85,
	0x6f, 0x54, 0xda, 0xdb, 0xd4, 0xaf, 0xed, 0x9d, 0x87, 0xcb, 0x0e, 0xde, 0x7f, 0xb2, 0x27, 0xb7,
	0xa4, 0xeb, 0xa1, 0xd9, 0xe5, 0xeb, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xab, 0xce, 0xe4,
	0xe8, 0x02, 0x00, 0x00,
}
